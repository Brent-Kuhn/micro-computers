
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000ad8  00000b6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800112  00800112  00000b7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bdf  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000753  00000000  00000000  00001827  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a91  00000000  00000000  00001f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00002a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010e31  00000000  00000000  00002ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001b2  00000000  00000000  00013905  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00013ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000645  00000000  00000000  00013aff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	43 c0       	rjmp	.+134    	; 0x88 <__ctors_end>
   2:	00 00       	nop
   4:	5c c0       	rjmp	.+184    	; 0xbe <__bad_interrupt>
   6:	00 00       	nop
   8:	5a c0       	rjmp	.+180    	; 0xbe <__bad_interrupt>
   a:	00 00       	nop
   c:	58 c0       	rjmp	.+176    	; 0xbe <__bad_interrupt>
   e:	00 00       	nop
  10:	56 c0       	rjmp	.+172    	; 0xbe <__bad_interrupt>
  12:	00 00       	nop
  14:	54 c0       	rjmp	.+168    	; 0xbe <__bad_interrupt>
  16:	00 00       	nop
  18:	52 c0       	rjmp	.+164    	; 0xbe <__bad_interrupt>
  1a:	00 00       	nop
  1c:	50 c0       	rjmp	.+160    	; 0xbe <__bad_interrupt>
  1e:	00 00       	nop
  20:	4e c0       	rjmp	.+156    	; 0xbe <__bad_interrupt>
  22:	00 00       	nop
  24:	4c c0       	rjmp	.+152    	; 0xbe <__bad_interrupt>
  26:	00 00       	nop
  28:	4a c0       	rjmp	.+148    	; 0xbe <__bad_interrupt>
  2a:	00 00       	nop
  2c:	48 c0       	rjmp	.+144    	; 0xbe <__bad_interrupt>
  2e:	00 00       	nop
  30:	46 c0       	rjmp	.+140    	; 0xbe <__bad_interrupt>
  32:	00 00       	nop
  34:	44 c0       	rjmp	.+136    	; 0xbe <__bad_interrupt>
  36:	00 00       	nop
  38:	42 c0       	rjmp	.+132    	; 0xbe <__bad_interrupt>
  3a:	00 00       	nop
  3c:	40 c0       	rjmp	.+128    	; 0xbe <__bad_interrupt>
  3e:	00 00       	nop
  40:	3e c0       	rjmp	.+124    	; 0xbe <__bad_interrupt>
  42:	00 00       	nop
  44:	3c c0       	rjmp	.+120    	; 0xbe <__bad_interrupt>
  46:	00 00       	nop
  48:	3a c0       	rjmp	.+116    	; 0xbe <__bad_interrupt>
  4a:	00 00       	nop
  4c:	38 c0       	rjmp	.+112    	; 0xbe <__bad_interrupt>
  4e:	00 00       	nop
  50:	36 c0       	rjmp	.+108    	; 0xbe <__bad_interrupt>
  52:	00 00       	nop
  54:	34 c0       	rjmp	.+104    	; 0xbe <__bad_interrupt>
  56:	00 00       	nop
  58:	32 c0       	rjmp	.+100    	; 0xbe <__bad_interrupt>
  5a:	00 00       	nop
  5c:	30 c0       	rjmp	.+96     	; 0xbe <__bad_interrupt>
  5e:	00 00       	nop
  60:	2e c0       	rjmp	.+92     	; 0xbe <__bad_interrupt>
  62:	00 00       	nop
  64:	2c c0       	rjmp	.+88     	; 0xbe <__bad_interrupt>
  66:	00 00       	nop
  68:	f1 00       	.word	0x00f1	; ????
  6a:	18 01       	movw	r2, r16
  6c:	3f 01       	movw	r6, r30
  6e:	66 01       	movw	r12, r12
  70:	8d 01       	movw	r16, r26
  72:	b4 01       	movw	r22, r8
  74:	db 01       	movw	r26, r22
  76:	02 02       	muls	r16, r18
  78:	3d 02       	muls	r19, r29
  7a:	5a 02       	muls	r21, r26
  7c:	77 02       	muls	r23, r23
  7e:	94 02       	muls	r25, r20
  80:	b1 02       	muls	r27, r17
  82:	ce 02       	muls	r28, r30
  84:	eb 02       	muls	r30, r27
  86:	08 03       	fmul	r16, r16

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
  94:	11 e0       	ldi	r17, 0x01	; 1
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	e8 ed       	ldi	r30, 0xD8	; 216
  9c:	fa e0       	ldi	r31, 0x0A	; 10
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 31       	cpi	r26, 0x12	; 18
  a6:	b1 07       	cpc	r27, r17
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>

000000aa <__do_clear_bss>:
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	a2 e1       	ldi	r26, 0x12	; 18
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
  b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
  b4:	a6 31       	cpi	r26, 0x16	; 22
  b6:	b2 07       	cpc	r27, r18
  b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
  ba:	b5 d3       	rcall	.+1898   	; 0x826 <main>
  bc:	0b c5       	rjmp	.+2582   	; 0xad4 <_exit>

000000be <__bad_interrupt>:
  be:	a0 cf       	rjmp	.-192    	; 0x0 <__vectors>

000000c0 <delay_ms>:
	spi_out(0x0C01);
	
	spi_out(row1);
}

void delay_ms(unsigned int d) {
  c0:	8f 92       	push	r8
  c2:	9f 92       	push	r9
  c4:	af 92       	push	r10
  c6:	bf 92       	push	r11
  c8:	cf 92       	push	r12
  ca:	df 92       	push	r13
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
	_delay_ms(d);
  d0:	bc 01       	movw	r22, r24
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	df d3       	rcall	.+1982   	; 0x896 <__floatunsisf>
  d8:	4b 01       	movw	r8, r22
  da:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	4a e7       	ldi	r20, 0x7A	; 122
  e2:	55 e4       	ldi	r21, 0x45	; 69
  e4:	66 d4       	rcall	.+2252   	; 0x9b2 <__mulsf3>
  e6:	6b 01       	movw	r12, r22
  e8:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	40 e8       	ldi	r20, 0x80	; 128
  f0:	5f e3       	ldi	r21, 0x3F	; 63
  f2:	a1 d3       	rcall	.+1858   	; 0x836 <__cmpsf2>
  f4:	88 23       	and	r24, r24
  f6:	0c f1       	brlt	.+66     	; 0x13a <delay_ms+0x7a>
		__ticks = 1;
	else if (__tmp > 65535)
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	3f ef       	ldi	r19, 0xFF	; 255
  fc:	4f e7       	ldi	r20, 0x7F	; 127
  fe:	57 e4       	ldi	r21, 0x47	; 71
 100:	c7 01       	movw	r24, r14
 102:	b6 01       	movw	r22, r12
 104:	52 d4       	rcall	.+2212   	; 0x9aa <__gesf2>
 106:	18 16       	cp	r1, r24
 108:	a4 f4       	brge	.+40     	; 0x132 <delay_ms+0x72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	40 e2       	ldi	r20, 0x20	; 32
 110:	51 e4       	ldi	r21, 0x41	; 65
 112:	c5 01       	movw	r24, r10
 114:	b4 01       	movw	r22, r8
 116:	4d d4       	rcall	.+2202   	; 0x9b2 <__mulsf3>
 118:	92 d3       	rcall	.+1828   	; 0x83e <__fixunssfsi>
		while(__ticks)
 11a:	61 15       	cp	r22, r1
 11c:	71 05       	cpc	r23, r1
 11e:	91 f0       	breq	.+36     	; 0x144 <delay_ms+0x84>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 120:	20 e9       	ldi	r18, 0x90	; 144
 122:	31 e0       	ldi	r19, 0x01	; 1
 124:	c9 01       	movw	r24, r18
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <delay_ms+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 12a:	61 50       	subi	r22, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 12c:	71 09       	sbc	r23, r1
 12e:	d1 f7       	brne	.-12     	; 0x124 <delay_ms+0x64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 130:	09 c0       	rjmp	.+18     	; 0x144 <delay_ms+0x84>
 132:	c7 01       	movw	r24, r14
 134:	b6 01       	movw	r22, r12
 136:	83 d3       	rcall	.+1798   	; 0x83e <__fixunssfsi>
 138:	02 c0       	rjmp	.+4      	; 0x13e <delay_ms+0x7e>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	cb 01       	movw	r24, r22
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <delay_ms+0x80>
}
 144:	ff 90       	pop	r15
 146:	ef 90       	pop	r14
 148:	df 90       	pop	r13
 14a:	cf 90       	pop	r12
 14c:	bf 90       	pop	r11
 14e:	af 90       	pop	r10
 150:	9f 90       	pop	r9
 152:	8f 90       	pop	r8
 154:	08 95       	ret

00000156 <spi_out>:

void spi_out(uint16_t data){
	PORTB &= ~(1<<CS);				//enable slave device
 156:	2a 98       	cbi	0x05, 2	; 5
	SPDR = (data>>8);				//start transmission
 158:	9e bd       	out	0x2e, r25	; 46
	while(!(SPSR & (1<<SPIF)));		//wait transfer finish
 15a:	0d b4       	in	r0, 0x2d	; 45
 15c:	07 fe       	sbrs	r0, 7
 15e:	fd cf       	rjmp	.-6      	; 0x15a <spi_out+0x4>
	SPDR = (data & 0xFF);			//start transmission
 160:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));		//wait transfer finish
 162:	0d b4       	in	r0, 0x2d	; 45
 164:	07 fe       	sbrs	r0, 7
 166:	fd cf       	rjmp	.-6      	; 0x162 <spi_out+0xc>
	PORTB |= (1<<CS);				//disable slave device
 168:	2a 9a       	sbi	0x05, 2	; 5
	delay_ms(1);					//datasheet says to wait a little
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	a8 cf       	rjmp	.-176    	; 0xc0 <delay_ms>
 170:	08 95       	ret

00000172 <init_LED>:
	while(1){
		monitor_buttons();
	}
}

void init_LED(void) {
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
	//PORTB is the SPI port
	//DDRB = 0xFF; // Turn DDRB as output
	// Make CLK, MOSI, and CS outputs
	SET_HIGH(DDRB, CLK);
 176:	25 9a       	sbi	0x04, 5	; 4
	SET_HIGH(DDRB, MOSI);
 178:	23 9a       	sbi	0x04, 3	; 4
	SET_HIGH(DDRB, CS);
 17a:	22 9a       	sbi	0x04, 2	; 4
	
	//Enable SPI as master
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 17c:	81 e5       	ldi	r24, 0x51	; 81
 17e:	8c bd       	out	0x2c, r24	; 44
	
	spi_out(0x0900); // Disable the decoding
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	99 e0       	ldi	r25, 0x09	; 9
 184:	e8 df       	rcall	.-48     	; 0x156 <spi_out>
	spi_out(0x0B07); // Scan the segments
 186:	87 e0       	ldi	r24, 0x07	; 7
 188:	9b e0       	ldi	r25, 0x0B	; 11
 18a:	e5 df       	rcall	.-54     	; 0x156 <spi_out>
	
	// Clear each row by sending 0x0r00 where r=row index
	for(uint16_t i = row8; i <= row1; i += 0x0100) {
 18c:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__data_start>
 190:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__data_start+0x1>
 194:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <row1>
 198:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <row1+0x1>
 19c:	8c 17       	cp	r24, r28
 19e:	9d 07       	cpc	r25, r29
		spi_out(i);
 1a0:	50 f0       	brcs	.+20     	; 0x1b6 <init_LED+0x44>
 1a2:	ce 01       	movw	r24, r28
 1a4:	d8 df       	rcall	.-80     	; 0x156 <spi_out>
	
	spi_out(0x0900); // Disable the decoding
	spi_out(0x0B07); // Scan the segments
	
	// Clear each row by sending 0x0r00 where r=row index
	for(uint16_t i = row8; i <= row1; i += 0x0100) {
 1a6:	d3 95       	inc	r29
 1a8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <row1>
 1ac:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <row1+0x1>
 1b0:	8c 17       	cp	r24, r28
 1b2:	9d 07       	cpc	r25, r29
		spi_out(i);
	}
	
	// Remove the device from shutdown mode
	spi_out(0x0C01);
 1b4:	b0 f7       	brcc	.-20     	; 0x1a2 <init_LED+0x30>
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	9c e0       	ldi	r25, 0x0C	; 12
 1ba:	cd df       	rcall	.-102    	; 0x156 <spi_out>
	
	spi_out(row1);
 1bc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <row1>
 1c0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <row1+0x1>
 1c4:	c8 df       	rcall	.-112    	; 0x156 <spi_out>
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <toggleLed>:
	toggleLed();
	delay_ms(250);
}

void toggleLed(void) {
	switch(position[1]) {
 1cc:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end+0x2>
 1d0:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__data_end+0x3>
 1d4:	e8 30       	cpi	r30, 0x08	; 8
 1d6:	f1 05       	cpc	r31, r1
 1d8:	08 f0       	brcs	.+2      	; 0x1dc <toggleLed+0x10>
 1da:	3a c1       	rjmp	.+628    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 1dc:	ec 5c       	subi	r30, 0xCC	; 204
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	73 c4       	rjmp	.+2278   	; 0xac8 <__tablejump2__>
		case 0:
			if(row1&(1<<position[0])) {
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	00 90 12 01 	lds	r0, 0x0112	; 0x800112 <__data_end>
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <toggleLed+0x24>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <toggleLed+0x20>
 1f4:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <row1>
 1f8:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <row1+0x1>
 1fc:	ac 01       	movw	r20, r24
 1fe:	42 23       	and	r20, r18
 200:	53 23       	and	r21, r19
 202:	45 2b       	or	r20, r21
 204:	49 f0       	breq	.+18     	; 0x218 <toggleLed+0x4c>
				row1 &= ~(1<<position[0]);
 206:	80 95       	com	r24
 208:	90 95       	com	r25
 20a:	82 23       	and	r24, r18
 20c:	93 23       	and	r25, r19
 20e:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <row1+0x1>
 212:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <row1>
 216:	06 c0       	rjmp	.+12     	; 0x224 <toggleLed+0x58>
			} else {
				row1 |= (1<<position[0]);
 218:	82 2b       	or	r24, r18
 21a:	93 2b       	or	r25, r19
 21c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <row1+0x1>
 220:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <row1>
			}
			spi_out(row1);
 224:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <row1>
 228:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <row1+0x1>
 22c:	94 cf       	rjmp	.-216    	; 0x156 <spi_out>
			break;
 22e:	08 95       	ret
		case 1:
			if(row2&(1<<position[0])) {
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	00 90 12 01 	lds	r0, 0x0112	; 0x800112 <__data_end>
 238:	02 c0       	rjmp	.+4      	; 0x23e <toggleLed+0x72>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <toggleLed+0x6e>
 242:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <row2>
 246:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <row2+0x1>
 24a:	ac 01       	movw	r20, r24
 24c:	42 23       	and	r20, r18
 24e:	53 23       	and	r21, r19
 250:	45 2b       	or	r20, r21
 252:	49 f0       	breq	.+18     	; 0x266 <toggleLed+0x9a>
				row2 &= ~(1<<position[0]);
 254:	80 95       	com	r24
 256:	90 95       	com	r25
 258:	82 23       	and	r24, r18
 25a:	93 23       	and	r25, r19
 25c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <row2+0x1>
 260:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <row2>
 264:	06 c0       	rjmp	.+12     	; 0x272 <toggleLed+0xa6>
			} else {
				row2 |= (1<<position[0]);
 266:	82 2b       	or	r24, r18
 268:	93 2b       	or	r25, r19
 26a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <row2+0x1>
 26e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <row2>
			}
			spi_out(row2);
 272:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <row2>
 276:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <row2+0x1>
 27a:	6d cf       	rjmp	.-294    	; 0x156 <spi_out>
			break;
 27c:	08 95       	ret
		case 2:
			if(row3&(1<<position[0])) {
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	00 90 12 01 	lds	r0, 0x0112	; 0x800112 <__data_end>
 286:	02 c0       	rjmp	.+4      	; 0x28c <toggleLed+0xc0>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	0a 94       	dec	r0
 28e:	e2 f7       	brpl	.-8      	; 0x288 <toggleLed+0xbc>
 290:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <row3>
 294:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <row3+0x1>
 298:	ac 01       	movw	r20, r24
 29a:	42 23       	and	r20, r18
 29c:	53 23       	and	r21, r19
 29e:	45 2b       	or	r20, r21
 2a0:	49 f0       	breq	.+18     	; 0x2b4 <toggleLed+0xe8>
				row3 &= ~(1<<position[0]);
 2a2:	80 95       	com	r24
 2a4:	90 95       	com	r25
 2a6:	82 23       	and	r24, r18
 2a8:	93 23       	and	r25, r19
 2aa:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <row3+0x1>
 2ae:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <row3>
 2b2:	06 c0       	rjmp	.+12     	; 0x2c0 <toggleLed+0xf4>
			} else {
				row3 |= (1<<position[0]);
 2b4:	82 2b       	or	r24, r18
 2b6:	93 2b       	or	r25, r19
 2b8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <row3+0x1>
 2bc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <row3>
			}
			spi_out(row3);
 2c0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <row3>
 2c4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <row3+0x1>
 2c8:	46 cf       	rjmp	.-372    	; 0x156 <spi_out>
			break;
 2ca:	08 95       	ret
		case 3:
			if(row4&(1<<position[0])) {
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	00 90 12 01 	lds	r0, 0x0112	; 0x800112 <__data_end>
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <toggleLed+0x10e>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	0a 94       	dec	r0
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <toggleLed+0x10a>
 2de:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <row4>
 2e2:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <row4+0x1>
 2e6:	ac 01       	movw	r20, r24
 2e8:	42 23       	and	r20, r18
 2ea:	53 23       	and	r21, r19
 2ec:	45 2b       	or	r20, r21
 2ee:	49 f0       	breq	.+18     	; 0x302 <toggleLed+0x136>
				row4 &= ~(1<<position[0]);
 2f0:	80 95       	com	r24
 2f2:	90 95       	com	r25
 2f4:	82 23       	and	r24, r18
 2f6:	93 23       	and	r25, r19
 2f8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <row4+0x1>
 2fc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <row4>
 300:	06 c0       	rjmp	.+12     	; 0x30e <toggleLed+0x142>
			} else {
				row4 |= (1<<position[0]);
 302:	82 2b       	or	r24, r18
 304:	93 2b       	or	r25, r19
 306:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <row4+0x1>
 30a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <row4>
			}
			spi_out(row4);
 30e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <row4>
 312:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <row4+0x1>
 316:	1f cf       	rjmp	.-450    	; 0x156 <spi_out>
			break;
 318:	08 95       	ret
		case 4:
			if(row5&(1<<position[0])) {
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	00 90 12 01 	lds	r0, 0x0112	; 0x800112 <__data_end>
 322:	02 c0       	rjmp	.+4      	; 0x328 <toggleLed+0x15c>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <toggleLed+0x158>
 32c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <row5>
 330:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <row5+0x1>
 334:	ac 01       	movw	r20, r24
 336:	42 23       	and	r20, r18
 338:	53 23       	and	r21, r19
 33a:	45 2b       	or	r20, r21
 33c:	49 f0       	breq	.+18     	; 0x350 <toggleLed+0x184>
				row5 &= ~(1<<position[0]);
 33e:	80 95       	com	r24
 340:	90 95       	com	r25
 342:	82 23       	and	r24, r18
 344:	93 23       	and	r25, r19
 346:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <row5+0x1>
 34a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <row5>
 34e:	06 c0       	rjmp	.+12     	; 0x35c <toggleLed+0x190>
			} else {
				row5 |= (1<<position[0]);
 350:	82 2b       	or	r24, r18
 352:	93 2b       	or	r25, r19
 354:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <row5+0x1>
 358:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <row5>
			}
			spi_out(row5);
 35c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <row5>
 360:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <row5+0x1>
 364:	f8 ce       	rjmp	.-528    	; 0x156 <spi_out>
			break;
 366:	08 95       	ret
		case 5:
			if(row6&(1<<position[0])) {
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	00 90 12 01 	lds	r0, 0x0112	; 0x800112 <__data_end>
 370:	02 c0       	rjmp	.+4      	; 0x376 <toggleLed+0x1aa>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	0a 94       	dec	r0
 378:	e2 f7       	brpl	.-8      	; 0x372 <toggleLed+0x1a6>
 37a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <row6>
 37e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <row6+0x1>
 382:	ac 01       	movw	r20, r24
 384:	42 23       	and	r20, r18
 386:	53 23       	and	r21, r19
 388:	45 2b       	or	r20, r21
 38a:	49 f0       	breq	.+18     	; 0x39e <toggleLed+0x1d2>
				row6 &= ~(1<<position[0]);
 38c:	80 95       	com	r24
 38e:	90 95       	com	r25
 390:	82 23       	and	r24, r18
 392:	93 23       	and	r25, r19
 394:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <row6+0x1>
 398:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <row6>
 39c:	06 c0       	rjmp	.+12     	; 0x3aa <toggleLed+0x1de>
			} else {
				row6 |= (1<<position[0]);
 39e:	82 2b       	or	r24, r18
 3a0:	93 2b       	or	r25, r19
 3a2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <row6+0x1>
 3a6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <row6>
			}
			spi_out(row6);
 3aa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <row6>
 3ae:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <row6+0x1>
 3b2:	d1 ce       	rjmp	.-606    	; 0x156 <spi_out>
			break;
 3b4:	08 95       	ret
		case 6:
			if(row7&(1<<position[0])) {
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	00 90 12 01 	lds	r0, 0x0112	; 0x800112 <__data_end>
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <toggleLed+0x1f8>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	0a 94       	dec	r0
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <toggleLed+0x1f4>
 3c8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <row7>
 3cc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <row7+0x1>
 3d0:	ac 01       	movw	r20, r24
 3d2:	42 23       	and	r20, r18
 3d4:	53 23       	and	r21, r19
 3d6:	45 2b       	or	r20, r21
 3d8:	49 f0       	breq	.+18     	; 0x3ec <toggleLed+0x220>
				row7 &= ~(1<<position[0]);
 3da:	80 95       	com	r24
 3dc:	90 95       	com	r25
 3de:	82 23       	and	r24, r18
 3e0:	93 23       	and	r25, r19
 3e2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <row7+0x1>
 3e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <row7>
 3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <toggleLed+0x22c>
			} else {
				row7 |= (1<<position[0]);
 3ec:	82 2b       	or	r24, r18
 3ee:	93 2b       	or	r25, r19
 3f0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <row7+0x1>
 3f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <row7>
			}
			spi_out(row7);
 3f8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <row7>
 3fc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <row7+0x1>
 400:	aa ce       	rjmp	.-684    	; 0x156 <spi_out>
			break;
 402:	08 95       	ret
		case 7:
			if(row8&(1<<position[0])) {
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	00 90 12 01 	lds	r0, 0x0112	; 0x800112 <__data_end>
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	0a 94       	dec	r0
 414:	e2 f7       	brpl	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 41a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 41e:	ac 01       	movw	r20, r24
 420:	42 23       	and	r20, r18
 422:	53 23       	and	r21, r19
 424:	45 2b       	or	r20, r21
 426:	49 f0       	breq	.+18     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
				row8 &= ~(1<<position[0]);
 428:	80 95       	com	r24
 42a:	90 95       	com	r25
 42c:	82 23       	and	r24, r18
 42e:	93 23       	and	r25, r19
 430:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 434:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 438:	06 c0       	rjmp	.+12     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
			} else {
				row8 |= (1<<position[0]);
 43a:	82 2b       	or	r24, r18
 43c:	93 2b       	or	r25, r19
 43e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 442:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			}
			spi_out(row8);
 446:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 44a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 44e:	83 ce       	rjmp	.-762    	; 0x156 <spi_out>
 450:	08 95       	ret

00000452 <blink>:
		blink();
	}
}

void blink(void) {
	toggleLed();
 452:	bc de       	rcall	.-648    	; 0x1cc <toggleLed>
	delay_ms(250);
 454:	8a ef       	ldi	r24, 0xFA	; 250
 456:	90 e0       	ldi	r25, 0x00	; 0
	toggleLed();
 458:	33 de       	rcall	.-922    	; 0xc0 <delay_ms>
	delay_ms(250);
 45a:	b8 de       	rcall	.-656    	; 0x1cc <toggleLed>
 45c:	8a ef       	ldi	r24, 0xFA	; 250
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	2f ce       	rjmp	.-930    	; 0xc0 <delay_ms>
 462:	08 95       	ret

00000464 <getState>:
			break;
	}
}

void getState(void) {
	switch(position[1]) {
 464:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end+0x2>
 468:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__data_end+0x3>
 46c:	e8 30       	cpi	r30, 0x08	; 8
 46e:	f1 05       	cpc	r31, r1
 470:	08 f0       	brcs	.+2      	; 0x474 <getState+0x10>
 472:	ea c0       	rjmp	.+468    	; 0x648 <getState+0x1e4>
 474:	e4 5c       	subi	r30, 0xC4	; 196
 476:	ff 4f       	sbci	r31, 0xFF	; 255
 478:	27 c3       	rjmp	.+1614   	; 0xac8 <__tablejump2__>
		case 0:
			if(row1&(1<<position[0])) {
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	00 90 12 01 	lds	r0, 0x0112	; 0x800112 <__data_end>
 482:	02 c0       	rjmp	.+4      	; 0x488 <getState+0x24>
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	0a 94       	dec	r0
 48a:	e2 f7       	brpl	.-8      	; 0x484 <getState+0x20>
 48c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <row1>
 490:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <row1+0x1>
 494:	82 23       	and	r24, r18
 496:	93 23       	and	r25, r19
 498:	89 2b       	or	r24, r25
 49a:	39 f0       	breq	.+14     	; 0x4aa <getState+0x46>
				state = 1;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <state+0x1>
 4a4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
 4a8:	08 95       	ret
			} else {
				state = 0;
 4aa:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <state+0x1>
 4ae:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
 4b2:	08 95       	ret
			}
			break;
		case 1:
			if(row2&(1<<position[0])) {
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	00 90 12 01 	lds	r0, 0x0112	; 0x800112 <__data_end>
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <getState+0x5e>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	0a 94       	dec	r0
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <getState+0x5a>
 4c6:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <row2>
 4ca:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <row2+0x1>
 4ce:	82 23       	and	r24, r18
 4d0:	93 23       	and	r25, r19
 4d2:	89 2b       	or	r24, r25
 4d4:	39 f0       	breq	.+14     	; 0x4e4 <getState+0x80>
				state = 1;
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <state+0x1>
 4de:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
 4e2:	08 95       	ret
			} else {
				state = 0;
 4e4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <state+0x1>
 4e8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
 4ec:	08 95       	ret
			}
			break;
		case 2:
			if(row3&(1<<position[0])) {
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	00 90 12 01 	lds	r0, 0x0112	; 0x800112 <__data_end>
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <getState+0x98>
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	0a 94       	dec	r0
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <getState+0x94>
 500:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <row3>
 504:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <row3+0x1>
 508:	82 23       	and	r24, r18
 50a:	93 23       	and	r25, r19
 50c:	89 2b       	or	r24, r25
 50e:	39 f0       	breq	.+14     	; 0x51e <getState+0xba>
				state = 1;
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <state+0x1>
 518:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
 51c:	08 95       	ret
			} else {
				state = 0;
 51e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <state+0x1>
 522:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
 526:	08 95       	ret
			}
			break;
		case 3:
			if(row4&(1<<position[0])) {
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	00 90 12 01 	lds	r0, 0x0112	; 0x800112 <__data_end>
 530:	02 c0       	rjmp	.+4      	; 0x536 <getState+0xd2>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	0a 94       	dec	r0
 538:	e2 f7       	brpl	.-8      	; 0x532 <getState+0xce>
 53a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <row4>
 53e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <row4+0x1>
 542:	82 23       	and	r24, r18
 544:	93 23       	and	r25, r19
 546:	89 2b       	or	r24, r25
 548:	39 f0       	breq	.+14     	; 0x558 <getState+0xf4>
				state = 1;
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <state+0x1>
 552:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
 556:	08 95       	ret
			} else {
				state = 0;
 558:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <state+0x1>
 55c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
 560:	08 95       	ret
			}
			break;
		case 4:
			if(row5&(1<<position[0])) {
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	00 90 12 01 	lds	r0, 0x0112	; 0x800112 <__data_end>
 56a:	02 c0       	rjmp	.+4      	; 0x570 <getState+0x10c>
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	0a 94       	dec	r0
 572:	e2 f7       	brpl	.-8      	; 0x56c <getState+0x108>
 574:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <row5>
 578:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <row5+0x1>
 57c:	82 23       	and	r24, r18
 57e:	93 23       	and	r25, r19
 580:	89 2b       	or	r24, r25
 582:	39 f0       	breq	.+14     	; 0x592 <getState+0x12e>
				state = 1;
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <state+0x1>
 58c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
 590:	08 95       	ret
			} else {
				state = 0;
 592:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <state+0x1>
 596:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
 59a:	08 95       	ret
			}
			break;
		case 5:
			if(row6&(1<<position[0])) {
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	00 90 12 01 	lds	r0, 0x0112	; 0x800112 <__data_end>
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <getState+0x146>
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	0a 94       	dec	r0
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <getState+0x142>
 5ae:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <row6>
 5b2:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <row6+0x1>
 5b6:	82 23       	and	r24, r18
 5b8:	93 23       	and	r25, r19
 5ba:	89 2b       	or	r24, r25
 5bc:	39 f0       	breq	.+14     	; 0x5cc <getState+0x168>
				state = 1;
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <state+0x1>
 5c6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
 5ca:	08 95       	ret
			} else {
				state = 0;
 5cc:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <state+0x1>
 5d0:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
 5d4:	08 95       	ret
			}
			break;
		case 6:
			if(row7&(1<<position[0])) {
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	00 90 12 01 	lds	r0, 0x0112	; 0x800112 <__data_end>
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <getState+0x180>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	0a 94       	dec	r0
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <getState+0x17c>
 5e8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <row7>
 5ec:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <row7+0x1>
 5f0:	82 23       	and	r24, r18
 5f2:	93 23       	and	r25, r19
 5f4:	89 2b       	or	r24, r25
 5f6:	39 f0       	breq	.+14     	; 0x606 <getState+0x1a2>
				state = 1;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <state+0x1>
 600:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
 604:	08 95       	ret
			} else {
				state = 0;
 606:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <state+0x1>
 60a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
 60e:	08 95       	ret
			}
			break;
		case 7:
			if(row8&(1<<position[0])) {
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	00 90 12 01 	lds	r0, 0x0112	; 0x800112 <__data_end>
 618:	02 c0       	rjmp	.+4      	; 0x61e <getState+0x1ba>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	0a 94       	dec	r0
 620:	e2 f7       	brpl	.-8      	; 0x61a <getState+0x1b6>
 622:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 626:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 62a:	82 23       	and	r24, r18
 62c:	93 23       	and	r25, r19
 62e:	89 2b       	or	r24, r25
 630:	39 f0       	breq	.+14     	; 0x640 <getState+0x1dc>
				state = 1;
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <state+0x1>
 63a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
 63e:	08 95       	ret
			} else {
				state = 0;
 640:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <state+0x1>
 644:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
 648:	08 95       	ret

0000064a <monitor_buttons>:
	PORTB |= (1<<CS);				//disable slave device
	delay_ms(1);					//datasheet says to wait a little
}

void monitor_buttons(void) {
	if(PIND&(1<<SELECT)) {
 64a:	4a 9b       	sbis	0x09, 2	; 9
 64c:	54 c0       	rjmp	.+168    	; 0x6f6 <monitor_buttons+0xac>
		 // check for long press
		 delay_ms(100);
 64e:	84 e6       	ldi	r24, 0x64	; 100
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	36 dd       	rcall	.-1428   	; 0xc0 <delay_ms>
		 if(PIND&(1<<SELECT)) {
 654:	4a 9b       	sbis	0x09, 2	; 9
 656:	3d c0       	rjmp	.+122    	; 0x6d2 <monitor_buttons+0x88>
			 delay_ms(100);
 658:	84 e6       	ldi	r24, 0x64	; 100
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	31 dd       	rcall	.-1438   	; 0xc0 <delay_ms>
			 if(PIND&(1<<SELECT)) {
 65e:	4a 9b       	sbis	0x09, 2	; 9
 660:	35 c0       	rjmp	.+106    	; 0x6cc <monitor_buttons+0x82>
				 delay_ms(100);
 662:	84 e6       	ldi	r24, 0x64	; 100
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	2c dd       	rcall	.-1448   	; 0xc0 <delay_ms>
				if(PIND&(1<<SELECT)) {
 668:	4a 9b       	sbis	0x09, 2	; 9
					delay_ms(100);
 66a:	2c c0       	rjmp	.+88     	; 0x6c4 <monitor_buttons+0x7a>
 66c:	84 e6       	ldi	r24, 0x64	; 100
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	27 dd       	rcall	.-1458   	; 0xc0 <delay_ms>
					if(PIND&(1<<SELECT)) {
 672:	4a 9b       	sbis	0x09, 2	; 9
						delay_ms(100);
 674:	23 c0       	rjmp	.+70     	; 0x6bc <monitor_buttons+0x72>
 676:	84 e6       	ldi	r24, 0x64	; 100
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	22 dd       	rcall	.-1468   	; 0xc0 <delay_ms>
						if(PIND&(1<<SELECT)) {
 67c:	4a 9b       	sbis	0x09, 2	; 9
 67e:	1a c0       	rjmp	.+52     	; 0x6b4 <monitor_buttons+0x6a>
							// If you make it this deep, then it was a long press.
							// Press all direction buttons at the same time to exit infinite loop
							while(!(PIND&(1<<UP)) | !(PIND&(1<<DOWN)) | !(PIND&(1<<LEFT)) | !(PIND&(1<<RIGHT))){}
 680:	41 e0       	ldi	r20, 0x01	; 1
 682:	89 b1       	in	r24, 0x09	; 9
 684:	29 b1       	in	r18, 0x09	; 9
 686:	99 b1       	in	r25, 0x09	; 9
 688:	59 b1       	in	r21, 0x09	; 9
 68a:	86 fb       	bst	r24, 6
 68c:	88 27       	eor	r24, r24
 68e:	80 f9       	bld	r24, 0
 690:	38 2f       	mov	r19, r24
 692:	34 27       	eor	r19, r20
 694:	25 fb       	bst	r18, 5
 696:	88 27       	eor	r24, r24
 698:	80 f9       	bld	r24, 0
 69a:	84 27       	eor	r24, r20
 69c:	83 2b       	or	r24, r19
 69e:	93 fb       	bst	r25, 3
 6a0:	99 27       	eor	r25, r25
 6a2:	90 f9       	bld	r25, 0
 6a4:	94 27       	eor	r25, r20
 6a6:	89 2b       	or	r24, r25
 6a8:	61 f7       	brne	.-40     	; 0x682 <monitor_buttons+0x38>
 6aa:	52 95       	swap	r21
 6ac:	51 70       	andi	r21, 0x01	; 1
 6ae:	54 13       	cpse	r21, r20
 6b0:	e8 cf       	rjmp	.-48     	; 0x682 <monitor_buttons+0x38>
						} else {delay_ms(100);} // Making up delays after if statements
 6b2:	0f c0       	rjmp	.+30     	; 0x6d2 <monitor_buttons+0x88>
 6b4:	84 e6       	ldi	r24, 0x64	; 100
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	03 dd       	rcall	.-1530   	; 0xc0 <delay_ms>
					} else {delay_ms(200);}
 6ba:	0b c0       	rjmp	.+22     	; 0x6d2 <monitor_buttons+0x88>
 6bc:	88 ec       	ldi	r24, 0xC8	; 200
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	ff dc       	rcall	.-1538   	; 0xc0 <delay_ms>
				} else {delay_ms(300);}
 6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <monitor_buttons+0x88>
 6c4:	8c e2       	ldi	r24, 0x2C	; 44
 6c6:	91 e0       	ldi	r25, 0x01	; 1
 6c8:	fb dc       	rcall	.-1546   	; 0xc0 <delay_ms>
 6ca:	03 c0       	rjmp	.+6      	; 0x6d2 <monitor_buttons+0x88>
			 }else {delay_ms(400);}
 6cc:	80 e9       	ldi	r24, 0x90	; 144
 6ce:	91 e0       	ldi	r25, 0x01	; 1
 6d0:	f7 dc       	rcall	.-1554   	; 0xc0 <delay_ms>
 6d2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
		 }
		 // Else toggle current bit
		 if(state == 1) {
 6d6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <state+0x1>
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	29 f4       	brne	.+10     	; 0x6e8 <monitor_buttons+0x9e>
 6de:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <state+0x1>
			 state = 0;
 6e2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <state>
 6e6:	08 95       	ret
 6e8:	81 e0       	ldi	r24, 0x01	; 1
		 } else {
			 state = 1;
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <state+0x1>
 6f0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <state>
 6f4:	08 95       	ret
		 }
	 }
	else if(PIND&(1<<UP)) {
 6f6:	4e 9b       	sbis	0x09, 6	; 9
 6f8:	25 c0       	rjmp	.+74     	; 0x744 <monitor_buttons+0xfa>
		if(!(state == 1)) {
 6fa:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 6fe:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <state+0x1>
 702:	01 97       	sbiw	r24, 0x01	; 1
 704:	09 f0       	breq	.+2      	; 0x708 <monitor_buttons+0xbe>
			toggleLed();
 706:	62 dd       	rcall	.-1340   	; 0x1cc <toggleLed>
 708:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end+0x2>
		}
		// move the cursor up
		position[1] = (position[1] - 1);
 70c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x3>
 710:	9c 01       	movw	r18, r24
 712:	21 50       	subi	r18, 0x01	; 1
 714:	31 09       	sbc	r19, r1
 716:	2a f0       	brmi	.+10     	; 0x722 <monitor_buttons+0xd8>
		if (position[1] < 0) {
 718:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <__data_end+0x3>
	else if(PIND&(1<<UP)) {
		if(!(state == 1)) {
			toggleLed();
		}
		// move the cursor up
		position[1] = (position[1] - 1);
 71c:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <__data_end+0x2>
 720:	05 c0       	rjmp	.+10     	; 0x72c <monitor_buttons+0xe2>
		if (position[1] < 0) {
			position[1] += 8;
 722:	07 96       	adiw	r24, 0x07	; 7
 724:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x3>
 728:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end+0x2>
		}
		getState();
		if(!(state == 1)) {
 72c:	9b de       	rcall	.-714    	; 0x464 <getState>
 72e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 732:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <state+0x1>
 736:	01 97       	sbiw	r24, 0x01	; 1
			toggleLed();
 738:	09 f0       	breq	.+2      	; 0x73c <monitor_buttons+0xf2>
 73a:	48 dd       	rcall	.-1392   	; 0x1cc <toggleLed>
		}
		delay_ms(500);
 73c:	84 ef       	ldi	r24, 0xF4	; 244
 73e:	91 e0       	ldi	r25, 0x01	; 1
 740:	bf cc       	rjmp	.-1666   	; 0xc0 <delay_ms>
 742:	08 95       	ret
	} 
	else if(PIND&(1<<DOWN)) {
 744:	4d 9b       	sbis	0x09, 5	; 9
 746:	22 c0       	rjmp	.+68     	; 0x78c <monitor_buttons+0x142>
		// Move the cursor down
		if(!(state == 1)) {
 748:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 74c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <state+0x1>
 750:	01 97       	sbiw	r24, 0x01	; 1
 752:	09 f0       	breq	.+2      	; 0x756 <monitor_buttons+0x10c>
			toggleLed();
 754:	3b dd       	rcall	.-1418   	; 0x1cc <toggleLed>
 756:	e2 e1       	ldi	r30, 0x12	; 18
		}
		position[1] = (position[1] + 1) % 8;
 758:	f1 e0       	ldi	r31, 0x01	; 1
 75a:	82 81       	ldd	r24, Z+2	; 0x02
 75c:	93 81       	ldd	r25, Z+3	; 0x03
 75e:	01 96       	adiw	r24, 0x01	; 1
 760:	87 70       	andi	r24, 0x07	; 7
 762:	90 78       	andi	r25, 0x80	; 128
 764:	99 23       	and	r25, r25
 766:	24 f4       	brge	.+8      	; 0x770 <monitor_buttons+0x126>
 768:	01 97       	sbiw	r24, 0x01	; 1
 76a:	88 6f       	ori	r24, 0xF8	; 248
 76c:	9f 6f       	ori	r25, 0xFF	; 255
 76e:	01 96       	adiw	r24, 0x01	; 1
		getState();
 770:	93 83       	std	Z+3, r25	; 0x03
 772:	82 83       	std	Z+2, r24	; 0x02
		if(!(state == 1)) {
 774:	77 de       	rcall	.-786    	; 0x464 <getState>
 776:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 77a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <state+0x1>
			toggleLed();
 77e:	01 97       	sbiw	r24, 0x01	; 1
 780:	09 f0       	breq	.+2      	; 0x784 <monitor_buttons+0x13a>
		}
		delay_ms(500);
 782:	24 dd       	rcall	.-1464   	; 0x1cc <toggleLed>
 784:	84 ef       	ldi	r24, 0xF4	; 244
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	9b cc       	rjmp	.-1738   	; 0xc0 <delay_ms>
 78a:	08 95       	ret
	}
	else if(PIND&(1<<LEFT)) {
 78c:	4b 9b       	sbis	0x09, 3	; 9
 78e:	25 c0       	rjmp	.+74     	; 0x7da <monitor_buttons+0x190>
		if(!(state == 1)) {
 790:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 794:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <state+0x1>
 798:	01 97       	sbiw	r24, 0x01	; 1
 79a:	09 f0       	breq	.+2      	; 0x79e <monitor_buttons+0x154>
			toggleLed();
 79c:	17 dd       	rcall	.-1490   	; 0x1cc <toggleLed>
 79e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
		}
		// Move the cursor left
		position[0] = (position[0] - 1);
 7a2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 7a6:	9c 01       	movw	r18, r24
 7a8:	21 50       	subi	r18, 0x01	; 1
 7aa:	31 09       	sbc	r19, r1
 7ac:	2a f0       	brmi	.+10     	; 0x7b8 <monitor_buttons+0x16e>
 7ae:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <__data_end+0x1>
 7b2:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <__data_end>
		if (position[0] < 0) {
			position[0] += 8;
 7b6:	05 c0       	rjmp	.+10     	; 0x7c2 <monitor_buttons+0x178>
 7b8:	07 96       	adiw	r24, 0x07	; 7
 7ba:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
		}
		getState();
 7be:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
		if(!(state == 1)) {
 7c2:	50 de       	rcall	.-864    	; 0x464 <getState>
 7c4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 7c8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <state+0x1>
			toggleLed();
 7cc:	01 97       	sbiw	r24, 0x01	; 1
 7ce:	09 f0       	breq	.+2      	; 0x7d2 <monitor_buttons+0x188>
		}
		delay_ms(500);
 7d0:	fd dc       	rcall	.-1542   	; 0x1cc <toggleLed>
 7d2:	84 ef       	ldi	r24, 0xF4	; 244
 7d4:	91 e0       	ldi	r25, 0x01	; 1
 7d6:	74 cc       	rjmp	.-1816   	; 0xc0 <delay_ms>
 7d8:	08 95       	ret
	}
	else if(PIND&(1<<RIGHT)) {
 7da:	4c 9b       	sbis	0x09, 4	; 9
 7dc:	22 c0       	rjmp	.+68     	; 0x822 <monitor_buttons+0x1d8>
		if(!(state == 1)) {
 7de:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 7e2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <state+0x1>
 7e6:	01 97       	sbiw	r24, 0x01	; 1
			toggleLed();
 7e8:	09 f0       	breq	.+2      	; 0x7ec <monitor_buttons+0x1a2>
 7ea:	f0 dc       	rcall	.-1568   	; 0x1cc <toggleLed>
		}
		// Move the cursor right
		position[0] = (position[0] + 1) % 8;
 7ec:	e2 e1       	ldi	r30, 0x12	; 18
 7ee:	f1 e0       	ldi	r31, 0x01	; 1
 7f0:	80 81       	ld	r24, Z
 7f2:	91 81       	ldd	r25, Z+1	; 0x01
 7f4:	01 96       	adiw	r24, 0x01	; 1
 7f6:	87 70       	andi	r24, 0x07	; 7
 7f8:	90 78       	andi	r25, 0x80	; 128
 7fa:	99 23       	and	r25, r25
 7fc:	24 f4       	brge	.+8      	; 0x806 <monitor_buttons+0x1bc>
 7fe:	01 97       	sbiw	r24, 0x01	; 1
 800:	88 6f       	ori	r24, 0xF8	; 248
 802:	9f 6f       	ori	r25, 0xFF	; 255
		getState();
 804:	01 96       	adiw	r24, 0x01	; 1
 806:	91 83       	std	Z+1, r25	; 0x01
		if(!(state == 1)) {
 808:	80 83       	st	Z, r24
 80a:	2c de       	rcall	.-936    	; 0x464 <getState>
 80c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state>
 810:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <state+0x1>
			toggleLed();
 814:	01 97       	sbiw	r24, 0x01	; 1
 816:	09 f0       	breq	.+2      	; 0x81a <monitor_buttons+0x1d0>
		}
		delay_ms(500);
 818:	d9 dc       	rcall	.-1614   	; 0x1cc <toggleLed>
 81a:	84 ef       	ldi	r24, 0xF4	; 244
 81c:	91 e0       	ldi	r25, 0x01	; 1
 81e:	50 cc       	rjmp	.-1888   	; 0xc0 <delay_ms>
 820:	08 95       	ret
	}
	else {
		blink();
 822:	17 ce       	rjmp	.-978    	; 0x452 <blink>
 824:	08 95       	ret

00000826 <main>:
 826:	52 98       	cbi	0x0a, 2	; 10
{
	//board_init(); // do I even need this?
	
	//PORTD is the button register
	SET_LOW(DDRD, SELECT);
	SET_LOW(DDRD, UP);
 828:	56 98       	cbi	0x0a, 6	; 10
	SET_LOW(DDRD, DOWN);
 82a:	55 98       	cbi	0x0a, 5	; 10
	SET_LOW(DDRD, LEFT);
 82c:	53 98       	cbi	0x0a, 3	; 10
	SET_LOW(DDRD, RIGHT);
 82e:	54 98       	cbi	0x0a, 4	; 10
	
	init_LED();
 830:	a0 dc       	rcall	.-1728   	; 0x172 <init_LED>
	
	// Send test data for now
	//spi_out(0x0FFF);
	//spi_out(row8 | 0x1);
	while(1){
		monitor_buttons();
 832:	0b df       	rcall	.-490    	; 0x64a <monitor_buttons>
 834:	fe cf       	rjmp	.-4      	; 0x832 <main+0xc>

00000836 <__cmpsf2>:
 836:	6c d0       	rcall	.+216    	; 0x910 <__fp_cmp>
 838:	08 f4       	brcc	.+2      	; 0x83c <__cmpsf2+0x6>
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	08 95       	ret

0000083e <__fixunssfsi>:
 83e:	94 d0       	rcall	.+296    	; 0x968 <__fp_splitA>
 840:	88 f0       	brcs	.+34     	; 0x864 <__fixunssfsi+0x26>
 842:	9f 57       	subi	r25, 0x7F	; 127
 844:	90 f0       	brcs	.+36     	; 0x86a <__fixunssfsi+0x2c>
 846:	b9 2f       	mov	r27, r25
 848:	99 27       	eor	r25, r25
 84a:	b7 51       	subi	r27, 0x17	; 23
 84c:	a0 f0       	brcs	.+40     	; 0x876 <__fixunssfsi+0x38>
 84e:	d1 f0       	breq	.+52     	; 0x884 <__fixunssfsi+0x46>
 850:	66 0f       	add	r22, r22
 852:	77 1f       	adc	r23, r23
 854:	88 1f       	adc	r24, r24
 856:	99 1f       	adc	r25, r25
 858:	1a f0       	brmi	.+6      	; 0x860 <__fixunssfsi+0x22>
 85a:	ba 95       	dec	r27
 85c:	c9 f7       	brne	.-14     	; 0x850 <__fixunssfsi+0x12>
 85e:	12 c0       	rjmp	.+36     	; 0x884 <__fixunssfsi+0x46>
 860:	b1 30       	cpi	r27, 0x01	; 1
 862:	81 f0       	breq	.+32     	; 0x884 <__fixunssfsi+0x46>
 864:	9b d0       	rcall	.+310    	; 0x99c <__fp_zero>
 866:	b1 e0       	ldi	r27, 0x01	; 1
 868:	08 95       	ret
 86a:	98 c0       	rjmp	.+304    	; 0x99c <__fp_zero>
 86c:	67 2f       	mov	r22, r23
 86e:	78 2f       	mov	r23, r24
 870:	88 27       	eor	r24, r24
 872:	b8 5f       	subi	r27, 0xF8	; 248
 874:	39 f0       	breq	.+14     	; 0x884 <__fixunssfsi+0x46>
 876:	b9 3f       	cpi	r27, 0xF9	; 249
 878:	cc f3       	brlt	.-14     	; 0x86c <__fixunssfsi+0x2e>
 87a:	86 95       	lsr	r24
 87c:	77 95       	ror	r23
 87e:	67 95       	ror	r22
 880:	b3 95       	inc	r27
 882:	d9 f7       	brne	.-10     	; 0x87a <__fixunssfsi+0x3c>
 884:	3e f4       	brtc	.+14     	; 0x894 <__fixunssfsi+0x56>
 886:	90 95       	com	r25
 888:	80 95       	com	r24
 88a:	70 95       	com	r23
 88c:	61 95       	neg	r22
 88e:	7f 4f       	sbci	r23, 0xFF	; 255
 890:	8f 4f       	sbci	r24, 0xFF	; 255
 892:	9f 4f       	sbci	r25, 0xFF	; 255
 894:	08 95       	ret

00000896 <__floatunsisf>:
 896:	e8 94       	clt
 898:	09 c0       	rjmp	.+18     	; 0x8ac <__floatsisf+0x12>

0000089a <__floatsisf>:
 89a:	97 fb       	bst	r25, 7
 89c:	3e f4       	brtc	.+14     	; 0x8ac <__floatsisf+0x12>
 89e:	90 95       	com	r25
 8a0:	80 95       	com	r24
 8a2:	70 95       	com	r23
 8a4:	61 95       	neg	r22
 8a6:	7f 4f       	sbci	r23, 0xFF	; 255
 8a8:	8f 4f       	sbci	r24, 0xFF	; 255
 8aa:	9f 4f       	sbci	r25, 0xFF	; 255
 8ac:	99 23       	and	r25, r25
 8ae:	a9 f0       	breq	.+42     	; 0x8da <__floatsisf+0x40>
 8b0:	f9 2f       	mov	r31, r25
 8b2:	96 e9       	ldi	r25, 0x96	; 150
 8b4:	bb 27       	eor	r27, r27
 8b6:	93 95       	inc	r25
 8b8:	f6 95       	lsr	r31
 8ba:	87 95       	ror	r24
 8bc:	77 95       	ror	r23
 8be:	67 95       	ror	r22
 8c0:	b7 95       	ror	r27
 8c2:	f1 11       	cpse	r31, r1
 8c4:	f8 cf       	rjmp	.-16     	; 0x8b6 <__floatsisf+0x1c>
 8c6:	fa f4       	brpl	.+62     	; 0x906 <__stack+0x7>
 8c8:	bb 0f       	add	r27, r27
 8ca:	11 f4       	brne	.+4      	; 0x8d0 <__floatsisf+0x36>
 8cc:	60 ff       	sbrs	r22, 0
 8ce:	1b c0       	rjmp	.+54     	; 0x906 <__stack+0x7>
 8d0:	6f 5f       	subi	r22, 0xFF	; 255
 8d2:	7f 4f       	sbci	r23, 0xFF	; 255
 8d4:	8f 4f       	sbci	r24, 0xFF	; 255
 8d6:	9f 4f       	sbci	r25, 0xFF	; 255
 8d8:	16 c0       	rjmp	.+44     	; 0x906 <__stack+0x7>
 8da:	88 23       	and	r24, r24
 8dc:	11 f0       	breq	.+4      	; 0x8e2 <__floatsisf+0x48>
 8de:	96 e9       	ldi	r25, 0x96	; 150
 8e0:	11 c0       	rjmp	.+34     	; 0x904 <__stack+0x5>
 8e2:	77 23       	and	r23, r23
 8e4:	21 f0       	breq	.+8      	; 0x8ee <__floatsisf+0x54>
 8e6:	9e e8       	ldi	r25, 0x8E	; 142
 8e8:	87 2f       	mov	r24, r23
 8ea:	76 2f       	mov	r23, r22
 8ec:	05 c0       	rjmp	.+10     	; 0x8f8 <__floatsisf+0x5e>
 8ee:	66 23       	and	r22, r22
 8f0:	71 f0       	breq	.+28     	; 0x90e <__stack+0xf>
 8f2:	96 e8       	ldi	r25, 0x86	; 134
 8f4:	86 2f       	mov	r24, r22
 8f6:	70 e0       	ldi	r23, 0x00	; 0
 8f8:	60 e0       	ldi	r22, 0x00	; 0
 8fa:	2a f0       	brmi	.+10     	; 0x906 <__stack+0x7>
 8fc:	9a 95       	dec	r25
 8fe:	66 0f       	add	r22, r22
 900:	77 1f       	adc	r23, r23
 902:	88 1f       	adc	r24, r24
 904:	da f7       	brpl	.-10     	; 0x8fc <__floatsisf+0x62>
 906:	88 0f       	add	r24, r24
 908:	96 95       	lsr	r25
 90a:	87 95       	ror	r24
 90c:	97 f9       	bld	r25, 7
 90e:	08 95       	ret

00000910 <__fp_cmp>:
 910:	99 0f       	add	r25, r25
 912:	00 08       	sbc	r0, r0
 914:	55 0f       	add	r21, r21
 916:	aa 0b       	sbc	r26, r26
 918:	e0 e8       	ldi	r30, 0x80	; 128
 91a:	fe ef       	ldi	r31, 0xFE	; 254
 91c:	16 16       	cp	r1, r22
 91e:	17 06       	cpc	r1, r23
 920:	e8 07       	cpc	r30, r24
 922:	f9 07       	cpc	r31, r25
 924:	c0 f0       	brcs	.+48     	; 0x956 <__fp_cmp+0x46>
 926:	12 16       	cp	r1, r18
 928:	13 06       	cpc	r1, r19
 92a:	e4 07       	cpc	r30, r20
 92c:	f5 07       	cpc	r31, r21
 92e:	98 f0       	brcs	.+38     	; 0x956 <__fp_cmp+0x46>
 930:	62 1b       	sub	r22, r18
 932:	73 0b       	sbc	r23, r19
 934:	84 0b       	sbc	r24, r20
 936:	95 0b       	sbc	r25, r21
 938:	39 f4       	brne	.+14     	; 0x948 <__fp_cmp+0x38>
 93a:	0a 26       	eor	r0, r26
 93c:	61 f0       	breq	.+24     	; 0x956 <__fp_cmp+0x46>
 93e:	23 2b       	or	r18, r19
 940:	24 2b       	or	r18, r20
 942:	25 2b       	or	r18, r21
 944:	21 f4       	brne	.+8      	; 0x94e <__fp_cmp+0x3e>
 946:	08 95       	ret
 948:	0a 26       	eor	r0, r26
 94a:	09 f4       	brne	.+2      	; 0x94e <__fp_cmp+0x3e>
 94c:	a1 40       	sbci	r26, 0x01	; 1
 94e:	a6 95       	lsr	r26
 950:	8f ef       	ldi	r24, 0xFF	; 255
 952:	81 1d       	adc	r24, r1
 954:	81 1d       	adc	r24, r1
 956:	08 95       	ret

00000958 <__fp_split3>:
 958:	57 fd       	sbrc	r21, 7
 95a:	90 58       	subi	r25, 0x80	; 128
 95c:	44 0f       	add	r20, r20
 95e:	55 1f       	adc	r21, r21
 960:	59 f0       	breq	.+22     	; 0x978 <__fp_splitA+0x10>
 962:	5f 3f       	cpi	r21, 0xFF	; 255
 964:	71 f0       	breq	.+28     	; 0x982 <__fp_splitA+0x1a>
 966:	47 95       	ror	r20

00000968 <__fp_splitA>:
 968:	88 0f       	add	r24, r24
 96a:	97 fb       	bst	r25, 7
 96c:	99 1f       	adc	r25, r25
 96e:	61 f0       	breq	.+24     	; 0x988 <__fp_splitA+0x20>
 970:	9f 3f       	cpi	r25, 0xFF	; 255
 972:	79 f0       	breq	.+30     	; 0x992 <__fp_splitA+0x2a>
 974:	87 95       	ror	r24
 976:	08 95       	ret
 978:	12 16       	cp	r1, r18
 97a:	13 06       	cpc	r1, r19
 97c:	14 06       	cpc	r1, r20
 97e:	55 1f       	adc	r21, r21
 980:	f2 cf       	rjmp	.-28     	; 0x966 <__fp_split3+0xe>
 982:	46 95       	lsr	r20
 984:	f1 df       	rcall	.-30     	; 0x968 <__fp_splitA>
 986:	08 c0       	rjmp	.+16     	; 0x998 <__fp_splitA+0x30>
 988:	16 16       	cp	r1, r22
 98a:	17 06       	cpc	r1, r23
 98c:	18 06       	cpc	r1, r24
 98e:	99 1f       	adc	r25, r25
 990:	f1 cf       	rjmp	.-30     	; 0x974 <__fp_splitA+0xc>
 992:	86 95       	lsr	r24
 994:	71 05       	cpc	r23, r1
 996:	61 05       	cpc	r22, r1
 998:	08 94       	sec
 99a:	08 95       	ret

0000099c <__fp_zero>:
 99c:	e8 94       	clt

0000099e <__fp_szero>:
 99e:	bb 27       	eor	r27, r27
 9a0:	66 27       	eor	r22, r22
 9a2:	77 27       	eor	r23, r23
 9a4:	cb 01       	movw	r24, r22
 9a6:	97 f9       	bld	r25, 7
 9a8:	08 95       	ret

000009aa <__gesf2>:
 9aa:	b2 df       	rcall	.-156    	; 0x910 <__fp_cmp>
 9ac:	08 f4       	brcc	.+2      	; 0x9b0 <__gesf2+0x6>
 9ae:	8f ef       	ldi	r24, 0xFF	; 255
 9b0:	08 95       	ret

000009b2 <__mulsf3>:
 9b2:	0b d0       	rcall	.+22     	; 0x9ca <__mulsf3x>
 9b4:	78 c0       	rjmp	.+240    	; 0xaa6 <__fp_round>
 9b6:	69 d0       	rcall	.+210    	; 0xa8a <__fp_pscA>
 9b8:	28 f0       	brcs	.+10     	; 0x9c4 <__mulsf3+0x12>
 9ba:	6e d0       	rcall	.+220    	; 0xa98 <__fp_pscB>
 9bc:	18 f0       	brcs	.+6      	; 0x9c4 <__mulsf3+0x12>
 9be:	95 23       	and	r25, r21
 9c0:	09 f0       	breq	.+2      	; 0x9c4 <__mulsf3+0x12>
 9c2:	5a c0       	rjmp	.+180    	; 0xa78 <__fp_inf>
 9c4:	5f c0       	rjmp	.+190    	; 0xa84 <__fp_nan>
 9c6:	11 24       	eor	r1, r1
 9c8:	ea cf       	rjmp	.-44     	; 0x99e <__fp_szero>

000009ca <__mulsf3x>:
 9ca:	c6 df       	rcall	.-116    	; 0x958 <__fp_split3>
 9cc:	a0 f3       	brcs	.-24     	; 0x9b6 <__mulsf3+0x4>

000009ce <__mulsf3_pse>:
 9ce:	95 9f       	mul	r25, r21
 9d0:	d1 f3       	breq	.-12     	; 0x9c6 <__mulsf3+0x14>
 9d2:	95 0f       	add	r25, r21
 9d4:	50 e0       	ldi	r21, 0x00	; 0
 9d6:	55 1f       	adc	r21, r21
 9d8:	62 9f       	mul	r22, r18
 9da:	f0 01       	movw	r30, r0
 9dc:	72 9f       	mul	r23, r18
 9de:	bb 27       	eor	r27, r27
 9e0:	f0 0d       	add	r31, r0
 9e2:	b1 1d       	adc	r27, r1
 9e4:	63 9f       	mul	r22, r19
 9e6:	aa 27       	eor	r26, r26
 9e8:	f0 0d       	add	r31, r0
 9ea:	b1 1d       	adc	r27, r1
 9ec:	aa 1f       	adc	r26, r26
 9ee:	64 9f       	mul	r22, r20
 9f0:	66 27       	eor	r22, r22
 9f2:	b0 0d       	add	r27, r0
 9f4:	a1 1d       	adc	r26, r1
 9f6:	66 1f       	adc	r22, r22
 9f8:	82 9f       	mul	r24, r18
 9fa:	22 27       	eor	r18, r18
 9fc:	b0 0d       	add	r27, r0
 9fe:	a1 1d       	adc	r26, r1
 a00:	62 1f       	adc	r22, r18
 a02:	73 9f       	mul	r23, r19
 a04:	b0 0d       	add	r27, r0
 a06:	a1 1d       	adc	r26, r1
 a08:	62 1f       	adc	r22, r18
 a0a:	83 9f       	mul	r24, r19
 a0c:	a0 0d       	add	r26, r0
 a0e:	61 1d       	adc	r22, r1
 a10:	22 1f       	adc	r18, r18
 a12:	74 9f       	mul	r23, r20
 a14:	33 27       	eor	r19, r19
 a16:	a0 0d       	add	r26, r0
 a18:	61 1d       	adc	r22, r1
 a1a:	23 1f       	adc	r18, r19
 a1c:	84 9f       	mul	r24, r20
 a1e:	60 0d       	add	r22, r0
 a20:	21 1d       	adc	r18, r1
 a22:	82 2f       	mov	r24, r18
 a24:	76 2f       	mov	r23, r22
 a26:	6a 2f       	mov	r22, r26
 a28:	11 24       	eor	r1, r1
 a2a:	9f 57       	subi	r25, 0x7F	; 127
 a2c:	50 40       	sbci	r21, 0x00	; 0
 a2e:	8a f0       	brmi	.+34     	; 0xa52 <__mulsf3_pse+0x84>
 a30:	e1 f0       	breq	.+56     	; 0xa6a <__mulsf3_pse+0x9c>
 a32:	88 23       	and	r24, r24
 a34:	4a f0       	brmi	.+18     	; 0xa48 <__mulsf3_pse+0x7a>
 a36:	ee 0f       	add	r30, r30
 a38:	ff 1f       	adc	r31, r31
 a3a:	bb 1f       	adc	r27, r27
 a3c:	66 1f       	adc	r22, r22
 a3e:	77 1f       	adc	r23, r23
 a40:	88 1f       	adc	r24, r24
 a42:	91 50       	subi	r25, 0x01	; 1
 a44:	50 40       	sbci	r21, 0x00	; 0
 a46:	a9 f7       	brne	.-22     	; 0xa32 <__mulsf3_pse+0x64>
 a48:	9e 3f       	cpi	r25, 0xFE	; 254
 a4a:	51 05       	cpc	r21, r1
 a4c:	70 f0       	brcs	.+28     	; 0xa6a <__mulsf3_pse+0x9c>
 a4e:	14 c0       	rjmp	.+40     	; 0xa78 <__fp_inf>
 a50:	a6 cf       	rjmp	.-180    	; 0x99e <__fp_szero>
 a52:	5f 3f       	cpi	r21, 0xFF	; 255
 a54:	ec f3       	brlt	.-6      	; 0xa50 <__mulsf3_pse+0x82>
 a56:	98 3e       	cpi	r25, 0xE8	; 232
 a58:	dc f3       	brlt	.-10     	; 0xa50 <__mulsf3_pse+0x82>
 a5a:	86 95       	lsr	r24
 a5c:	77 95       	ror	r23
 a5e:	67 95       	ror	r22
 a60:	b7 95       	ror	r27
 a62:	f7 95       	ror	r31
 a64:	e7 95       	ror	r30
 a66:	9f 5f       	subi	r25, 0xFF	; 255
 a68:	c1 f7       	brne	.-16     	; 0xa5a <__mulsf3_pse+0x8c>
 a6a:	fe 2b       	or	r31, r30
 a6c:	88 0f       	add	r24, r24
 a6e:	91 1d       	adc	r25, r1
 a70:	96 95       	lsr	r25
 a72:	87 95       	ror	r24
 a74:	97 f9       	bld	r25, 7
 a76:	08 95       	ret

00000a78 <__fp_inf>:
 a78:	97 f9       	bld	r25, 7
 a7a:	9f 67       	ori	r25, 0x7F	; 127
 a7c:	80 e8       	ldi	r24, 0x80	; 128
 a7e:	70 e0       	ldi	r23, 0x00	; 0
 a80:	60 e0       	ldi	r22, 0x00	; 0
 a82:	08 95       	ret

00000a84 <__fp_nan>:
 a84:	9f ef       	ldi	r25, 0xFF	; 255
 a86:	80 ec       	ldi	r24, 0xC0	; 192
 a88:	08 95       	ret

00000a8a <__fp_pscA>:
 a8a:	00 24       	eor	r0, r0
 a8c:	0a 94       	dec	r0
 a8e:	16 16       	cp	r1, r22
 a90:	17 06       	cpc	r1, r23
 a92:	18 06       	cpc	r1, r24
 a94:	09 06       	cpc	r0, r25
 a96:	08 95       	ret

00000a98 <__fp_pscB>:
 a98:	00 24       	eor	r0, r0
 a9a:	0a 94       	dec	r0
 a9c:	12 16       	cp	r1, r18
 a9e:	13 06       	cpc	r1, r19
 aa0:	14 06       	cpc	r1, r20
 aa2:	05 06       	cpc	r0, r21
 aa4:	08 95       	ret

00000aa6 <__fp_round>:
 aa6:	09 2e       	mov	r0, r25
 aa8:	03 94       	inc	r0
 aaa:	00 0c       	add	r0, r0
 aac:	11 f4       	brne	.+4      	; 0xab2 <__fp_round+0xc>
 aae:	88 23       	and	r24, r24
 ab0:	52 f0       	brmi	.+20     	; 0xac6 <__fp_round+0x20>
 ab2:	bb 0f       	add	r27, r27
 ab4:	40 f4       	brcc	.+16     	; 0xac6 <__fp_round+0x20>
 ab6:	bf 2b       	or	r27, r31
 ab8:	11 f4       	brne	.+4      	; 0xabe <__fp_round+0x18>
 aba:	60 ff       	sbrs	r22, 0
 abc:	04 c0       	rjmp	.+8      	; 0xac6 <__fp_round+0x20>
 abe:	6f 5f       	subi	r22, 0xFF	; 255
 ac0:	7f 4f       	sbci	r23, 0xFF	; 255
 ac2:	8f 4f       	sbci	r24, 0xFF	; 255
 ac4:	9f 4f       	sbci	r25, 0xFF	; 255
 ac6:	08 95       	ret

00000ac8 <__tablejump2__>:
 ac8:	ee 0f       	add	r30, r30
 aca:	ff 1f       	adc	r31, r31
 acc:	05 90       	lpm	r0, Z+
 ace:	f4 91       	lpm	r31, Z
 ad0:	e0 2d       	mov	r30, r0
 ad2:	09 94       	ijmp

00000ad4 <_exit>:
 ad4:	f8 94       	cli

00000ad6 <__stop_program>:
 ad6:	ff cf       	rjmp	.-2      	; 0xad6 <__stop_program>
